#!/bin/sh

set -e
set -u

#
# Detect the distribution, distribution version and distribution
# architecture (which can have distribution-specific mapping).  This
# was to be a python script, but it was decided that this should have the
# fewest dependencies on optional software.

# DISTRO_NAME is lowercase

UPPER="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
LOWER="abcdefghijklmnopqrstuvwxyz"


debian_arch_map() {
    local distro_arch=$1
    local arch

    case $distro_arch in
    (i686|i585|i386) arch=i386 ;;
    (x86_64) arch=amd64 ;;
    (*) arch=$distro_arch ;;
    esac

    echo $arch
}


debian_class_detect() {
    if [ -f "/etc/lsb-release" ]; then
        eval "$(. "/etc/lsb-release"; echo DISTRO_NAME="'${DISTRIB_ID}'" DISTRO_VERSION="'${DISTRIB_RELEASE}'" DISTRO_CODENAME="'${DISTRIB_CODENAME}'")"
    else
        DISTRO_NAME="debian"
        DISTRO_VERSION=$(head -n 1 "/etc/debian_version")
    fi

    DISTRO_ARCH=$(debian_arch_map $DISTRO_ARCH)
}


generic_arch_map() {
    local distro_arch=$1
    local arch

    case $distro_arch in
    (i686|i586|i486) arch=i386 ;;
    (*) arch=$distro_arch ;;
    esac

    echo $arch
}


redhat_class_detect() {
    if grep -q -i 'centos' "/etc/redhat-release"; then
        DISTRO_NAME="centos"
    elif grep -q -i 'fedora' "/etc/redhat-release"; then
        DISTRO_NAME="fedora"
    elif grep -q -i 'enterprise' "/etc/redhat-release"; then
        DISTRO_NAME="rhel"
    else
        DISTRO_NAME="redhat"
    fi

    local package=$(rpm -qf --queryformat="%{NAME}\n" /etc/redhat-release 2>/dev/null)
    if [ -n "${package}" ]; then
        DISTRO_VERSION=$(rpm -q --queryformat="%{VERSION}\n" ${package})
        DISTRO_VERSION=$(echo ${DISTRO_VERSION} | sed -e 's/[^0-9]*//; s/[^0-9].*//;')
    else
        DISTRO_VERSION=$(sed -e '/release/!d; s/.*release[^0-9]*//; s/[^0-9].*//;' /etc/redhat-release)
    fi

    if [ "${DISTRO_NAME}" != "fedora" ]; then
        local patchlevel=$(sed -e 'y/'${UPPER}'/'${LOWER}'/; s/.*update[^0-9]*//; s/[^0-9].*//;' /etc/redhat-release)
        if [ -z "${patchlevel}" ]; then
            local patchlevel=$(sed -e '/release/!d; s/.*release[ 	]*//; s/[ 	].*//; s/.*\.//;' /etc/redhat-release)
        fi
        [ -n "${patchlevel}" ] && DISTRO_PATCHLEVEL=${patchlevel}
    fi

    codename=$(sed -e 'y/'${UPPER}'/'${LOWER}'/; /release/!d; s/.*(//; s/[ 	]*update.*//; s/).*//;' /etc/redhat-release)
    [ -n "${codename}" ] && DISTRO_CODENAME=${codename}

    DISTRO_ARCH=$(generic_arch_map $DISTRO_ARCH)
}


suse_class_detect() {
    if grep -qi 'openSUSE' ${RELEASE_FILE}; then
        DISTRO_NAME="opensuse"
    elif grep -qi 'Enterprise *Server' ${RELEASE_FILE}; then
        DISTRO_NAME="sles"
    else
        DISTRO_NAME="suse"
    fi
    local version="$(sed -e '/^VERSION/!d; s/VERSION *= *//;' ${RELEASE_FILE})"
    DISTRO_VERSION="${version%.*}"
    DISTRO_PATCHLEVEL="${version#*.}"
    DISTRO_ARCH=$(generic_arch_map $DISTRO_ARCH)
}


distro_probe() {
    if [ -f "/etc/annvix-release" ]; then
        DISTRO_NAME="annvix"
    elif [ -f "/etc/arch-release" ]; then
        DISTRO_NAME="arch"
    elif [ -f "/etc/arklinux-release" ]; then
        DISTRO_NAME="arklinux"
    elif [ -f "/etc/aurox-release" ]; then
        DISTRO_NAME="aurox"
    elif [ -f "/etc/blackcat-release" ]; then
        DISTRO_NAME="blackcat"
    elif [ -f "/etc/cobalt-release" ]; then
        DISTRO_NAME="cobalt"
    elif [ -f "/etc/conectiva-release" ]; then
        DISTRO_NAME="connectiva"
    elif [ -f "/etc/debian_version" ]; then
        debian_class_detect
    elif [ -f "/etc/fedora-release" ]; then
        RELEASE_FILE="/etc/fedora-release"
        redhat_class_detect
    elif [ -f "/etc/gentoo-release" ]; then
        DISTRO_NAME="gentoo"
        DISTRO_VERSION=$(sed -n -e 's/Gentoo Base System release //p' "/etc/gentoo-release")
        DISTRO_ARCH=$(generic_arch_map $DISTRO_ARCH)
    elif [ -f "/etc/immunix-release" ]; then
        DISTRO_NAME="immunix"
    elif [ -f "/etc/knoppix_version" ]; then
        DISTRO_NAME="knoppix"
    elif [ -f "/etc/lfs-release" ]; then
        DISTRO_NAME="linuxfromscratch"
    elif [ -f "/etc/linuxppc-release" ]; then
        DISTRO_NAME="linuxppc"
    elif [ -f "/etc/mandriva-release" -o -f "/etc/mandrake-release" -o -f "/etc/mandrakelinux-release" ]; then
        DISTRO_NAME="mandriva"
    elif [ -f "/etc/mklinux-release" ]; then
        DISTRO_NAME="mklinux"
    elif [ -f "/etc/nld-release" ]; then
        DISTRO_NAME="novelllinuxdesktop"
    elif [ -f "/etc/pld-release" ]; then
        DISTRO_NAME="pld"
    elif [ -f "/etc/redhat-release" ]; then
        RELEASE_FILE="/etc/redhat-release"
        redhat_class_detect
    elif [ -f "/etc/redhat_version" ]; then
        RELEASE_FILE="/etc/redhat_version"
        redhat_class_detect
    elif [ -f "/etc/slackware-version" -o -f "/etc/slackware-release" ]; then
        DISTRO_NAME="slackware"
    elif [ -f "/etc/e-smith-release" ]; then
        DISTRO_NAME="smeserver"
    elif [ -f "/etc/release" ]; then
        DISTRO_NAME="solaris"
    elif [ -f "/etc/sun-release" ]; then
        DISTRO_NAME="sunjds"
    elif [ -f "/etc/SuSE-release" ]; then
        RELEASE_FILE="/etc/SuSE-release"
        suse_class_detect
    elif [ -f "/etc/novell-release" ]; then
        RELEASE_FILE="/etc/novell-release"
        suse_class_detect
    elif [ -f "/etc/sles-release" ]; then
        RELEASE_FILE="/etc/sles-release"
        suse_class_detect
    elif [ -f "/etc/tinysofa-release" ]; then
        DISTRO_NAME="tinysofa"
    elif [ -f "/etc/turbolinux-release" ]; then
        DISTRO_NAME="turbolinux"
    elif [ -f "/etc/lsb-release" ]; then
        debian_class_detect
    elif [ -f "/etc/ultrapenguin-release" ]; then
        DISTRO_NAME="ultrapenguin"
    elif [ -f "/etc/UnitedLinux-release" ]; then
        DISTRO_NAME="unitedlinux"
    elif [ -f "/etc/va-release" ]; then
        DISTRO_NAME="valinux"
    elif [ -f "/etc/yellowdog-release" ]; then
        DISTRO_NAME="yellowdog"
    elif [ -f "/etc/freebsd-update.conf" ]; then
        DISTRO_NAME="freebsd"
    fi
}


cleanup_value() {
    echo $1 | sed -e 'y/'${UPPER}'/'${LOWER}'/; s%[/ 	-]\{1,\}%_%g; s/[^A-Za-z0-9_.]//g;'
}


main() {

    DISTRO_NAME="unknown"
    DISTRO_VERSION="unknown"
    DISTRO_CODENAME="unknown"
    DISTRO_PATCHLEVEL="unknown"
    DISTRO_ARCH="$(uname -m)"
    DISTRO_KERNEL="$(uname -r)"

    distro_probe

    # clean-up special characters
    DISTRO_NAME=$(cleanup_value "$DISTRO_NAME")
    DISTRO_VERSION=$(cleanup_value "$DISTRO_VERSION")
    DISTRO_CODENAME=$(cleanup_value "$DISTRO_CODENAME")
    DISTRO_PATCHLEVEL=$(cleanup_value "$DISTRO_PATCHLEVEL")
    DISTRO_ARCH=$(cleanup_value "$DISTRO_ARCH")
    DISTRO_KERNEL=$(cleanup_value "$DISTRO_KERNEL")

    echo "DISTRO_NAME=$DISTRO_NAME"
    echo "DISTRO_VERSION=$DISTRO_VERSION"
    echo "DISTRO_CODENAME=$DISTRO_CODENAME"
    echo "DISTRO_PATCHLEVEL=$DISTRO_PATCHLEVEL"
    echo "DISTRO_ARCH=$DISTRO_ARCH"
    echo "DISTRO_KERNEL=$DISTRO_KERNEL"
}


main
